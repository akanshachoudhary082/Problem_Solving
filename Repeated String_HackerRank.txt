import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'repeatedString' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. LONG_INTEGER n
     */

    public static long repeatedString(String s, long n) {
    // Write your code here
   
    // Step 1: Count 'a' in the original string `s`
    long countOfAInS = s.chars().filter(ch -> ch == 'a').count();

    // Step 2: Calculate how many full repeats of `s` fit in `n`
    long fullRepeats = n / s.length();

    // Step 3: Calculate how many characters are left after the full repeats
    long remainingChars = n % s.length();

    // Step 4: Count 'a' in the remaining substring
    long countOfAInRemaining = s.substring(0, (int) remainingChars).chars().filter(ch -> ch == 'a').count();

    // Step 5: Add up the 'a' counts from full repeats and the remaining characters
    return (countOfAInS * fullRepeats) + countOfAInRemaining;
}

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        long n = Long.parseLong(bufferedReader.readLine().trim());

        long result = Result.repeatedString(s, n);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
