import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'sockMerchant' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER_ARRAY ar
     */

    public static int sockMerchant(int n, List<Integer> ar) {
    // Write your code here
    
   // Collections.sort(ar);
    // int pair = 0;
    // for(int i=0;i< n-1 ;i++)
    // {
    //     if(ar.get(i).equals(ar.get(i+1)))
    //     {
    //         pair++;// increase the pair if its pair found 
    //         i++; // means skip the next interation
    //     }
    // }
     
     
    //  /*
    //  i= 0 ; 0<6;i++
    //         2<6;
    //         4<6
    //         6<6
    //  ar[0] == arr[0+1]=> ar[0] == ar[1] => 10 == 10 => pair = 1 =>i++;
    //  ar[2] == ar[2+1] => ar[2] == ar[3] => 10 == 10 => pair = 2 => i++;
    //  ar[4] == ar[4+1] => ar[4] == ar[5] => 20 == 20 => pair = 3 => i++;
     
    //  */
     
    // return pair;
    // }



 //------------------------2nd method-------------------------
 
    Map<Integer,Integer> sockCount = new HashMap<>();
    
    int pairs = 0;
    for(int color : ar)
    {
        sockCount.put(color,sockCount.getOrDefault(color,0) + 1);
    }
    /*
    Iteration 1: Color = 10
Current color: 10
Current Map: sockCount = {} (empty)
getOrDefault: sockCount.getOrDefault(10, 0) returns 0 because 10 doesn't exist in the map yet.
Update Map: sockCount.put(10, 0 + 1), so now sockCount = {10=1} (1 sock of color 10).

Iteration 2: Color = 20
Current color: 20
Current Map: sockCount = {10=1}
getOrDefault: sockCount.getOrDefault(20, 0) returns 0 because 20 is not in the map.
Update Map: sockCount.put(20, 0 + 1), so now sockCount = {10=1, 20=1} (1 sock of color 10 and 1 sock of color 20).

Iteration 3: Color = 20 (again)
Current color: 20
Current Map: sockCount = {10=1, 20=1}
getOrDefault: sockCount.getOrDefault(20, 0) returns 1 because 20 already has 1 sock in the map.
Update Map: sockCount.put(20, 1 + 1), so now sockCount = {10=1, 20=2} (1 sock of color 10 and 2 socks of color 20).

Iteration 4: Color = 10 (again)
Current color: 10
Current Map: sockCount = {10=1, 20=2}
getOrDefault: sockCount.getOrDefault(10, 0) returns 1 because 10 already has 1 sock.
Update Map: sockCount.put(10, 1 + 1), so now sockCount = {10=2, 20=2} (2 socks of color 10 and 2 socks of color 20).

Iteration 5: Color = 10 (again)
Current color: 10
Current Map: sockCount = {10=2, 20=2}
getOrDefault: sockCount.getOrDefault(10, 0) returns 2 because 10 already has 2 socks.
Update Map: sockCount.put(10, 2 + 1), so now sockCount = {10=3, 20=2} (3 socks of color 10 and 2 socks of color 20).

Iteration 6: Color = 30
Current color: 30
Current Map: sockCount = {10=3, 20=2}
getOrDefault: sockCount.getOrDefault(30, 0) returns 0 because 30 is not in the map.
Update Map: sockCount.put(30, 0 + 1), so now sockCount = {10=3, 20=2, 30=1} (3 socks of color 10, 2 socks of color 20, 1 sock of color 30).

Iteration 7: Color = 50
Current color: 50
Current Map: sockCount = {10=3, 20=2, 30=1}
getOrDefault: sockCount.getOrDefault(50, 0) returns 0 because 50 is not in the map.
Update Map: sockCount.put(50, 0 + 1), so now sockCount = {10=3, 20=2, 30=1, 50=1} (3 socks of color 10, 2 socks of color 20, 1 sock of color 30, and 1 sock of color 50).

Iteration 8: Color = 10 (again)
Current color: 10
Current Map: sockCount = {10=3, 20=2, 30=1, 50=1}
getOrDefault: sockCount.getOrDefault(10, 0) returns 3 because 10 already has 3 socks.
Update Map: sockCount.put(10, 3 + 1), so now sockCount = {10=4, 20=2, 30=1, 50=1} (4 socks of color 10, 2 socks of color 20, 1 sock of color 30, and 1 sock of color 50).

Iteration 9: Color = 20 (again)
Current color: 20
Current Map: sockCount = {10=4, 20=2, 30=1, 50=1}
getOrDefault: sockCount.getOrDefault(20, 0) returns 2 because 20 already has 2 socks.
Update Map: sockCount.put(20, 2 + 1), so now sockCount = {10=4, 20=3, 30=1, 50=1} (4 socks of color 10, 3 socks of color 20, 1 sock of color 30, and 1 sock of color 50).
    */
    
    for(int count : sockCount.values())
    {
        pairs = pairs + count/2;
    }


// Iteration 1: Count = 4 (for color 10)
// Pairs Calculation: 4 / 2 = 2 pairs.
// Update pairs: pairs = 0 + 2 = 2
  return pairs;
    }
    
    
    
}



public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ar = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
