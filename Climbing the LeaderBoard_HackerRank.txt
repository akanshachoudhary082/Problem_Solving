import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
    // Write your code here
// Step 1: Remove duplicates and sort the ranked scores in descending order
        List<Integer> uniqueRanks = new ArrayList<>(new LinkedHashSet<>(ranked));
        Collections.sort(uniqueRanks, Collections.reverseOrder());

        List<Integer> results = new ArrayList<>();

        // Step 2: For each player's score, determine the rank
        for (int playerScore : player) {
            // Binary search to find the player's rank
            int rank = findRank(uniqueRanks, playerScore);
            results.add(rank);
        }

        return results;
    }

    private static int findRank(List<Integer> ranks, int score) {
        // Ranks are sorted in descending order
        int low = 0;
        int high = ranks.size() - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (ranks.get(mid) > score) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        // The rank is determined by how many scores are greater than the player's score
        return low + 1; // low is the number of scores greater than score
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int rankedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ranked = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int playerCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> player = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.climbingLeaderboard(ranked, player);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
