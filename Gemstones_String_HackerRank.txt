import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'gemstones' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING_ARRAY arr as parameter.
     */
    public static int gemstones(List<String> arr) {
    // Write your code here
    
    //arr = ['abcdde', 'baccd', 'eeabg']
    
    Map<Character,Integer> charCount = new HashMap<>();
    
    for(String s : arr)
    {
        Set<Character> set = new HashSet<>();
        char [] a = s.toCharArray();
        for(char c : a)//abcdde   baccd  eeabg
        {
            if(!set.contains(c)) //!(a=0)=>t !(b=0)=>t !(c=0)=>t !(d=0)=>t !(d=1)=>f !(e=0)=>t 
                                 //!(b=0)=>t !(a=0)=>t  !(c=0)=>t !(c=1)=>f !(d=0)=>t
                                 //!(e=0)=>t !(e=1)=>f !(a=0)=>t  !(b=0)=>t  !(g=0)=>t
            { 
                set.add(c); //a b c d
                            //b a c d
                            //e a b g
                            
                charCount.put(c,charCount.getOrDefault(c,0)+1);
                //     a = 1 b=1 c=1 d=1 e=1
                //     b = 2 a=2 c=2 d=2
                //     e = 2 a=3 b=3 g=1
                
                // a = 3 b = 3 c = 2 d = 2 e=2 g =1
            }
        }
    }
       
       int gemStones = 0;
       
       for(int count : charCount.values())
       {
           //arr = ['abcdde', 'baccd', 'eeabg']
           //arr.size() means there are three string
           if(count == arr.size()) //3 == 3  3==3 2==3 2==3 2==3 1==3
           {
               gemStones++; //1 2
           }
       }
       
       return gemStones; // a,b
       
       
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> arr = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        int result = Result.gemstones(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
