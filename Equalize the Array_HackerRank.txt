import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'equalizeArray' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static int equalizeArray(List<Integer> arr) {
    // Write your code here
    
//    int freq[] = new int[256]; 
//    int max = 0;
   
//    for(int i=0;i<arr.size();i++)
//    {
//        freq[arr.get(i)]++;
//    }
   
//    for(int i=0;i<freq.length;i++)
//    {
//        if(freq[i] > max)
//        {
//            max = freq[i];
           
           
//        }
      
//    }
    
//   return arr.size() - max;
    
    
    Map<Integer,Integer> freq = new  HashMap<>();
    
    for(int num : arr)
    {
        freq.put(num,freq.getOrDefault(num,0)+1); // 3 => 2 ,2 =>1 ,1=>1
    }
   
     int maxFreq = Collections.max(freq.values()); // 3
     
     
     return arr.size() - maxFreq;  // 5 - 3
     
    }
    
     

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.equalizeArray(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
